name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

permissions:
  id-token: write
  contents: read

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pybuilder
        pip install -r requirements.txt
        
    - name: Initialize PyBuilder
      run: |
        pyb --version
        pyb install_dependencies
        
    - name: Run unit tests
      run: pyb run_unit_tests
        
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          target/reports/
          target/unittest-xml/
        retention-days: 30
        
    - name: Run code coverage
      run: pyb coverage
        
    - name: Upload code coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: |
          target/reports/coverage/
          htmlcov/
        retention-days: 30
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./target/reports/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    # - name: SonarQube Scan
    #   uses: sonarsource/sonarqube-scan-action@master
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        
    # - name: SonarQube Quality Gate Check
    #   uses: sonarsource/sonarqube-quality-gate-action@master
    #   timeout-minutes: 5
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
    - name: Create build artifact
      run: pyb publish
        
    - name: Install security tools
      run: pip install bandit safety
        
    - name: Run Bandit security scan
      run: bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Run Safety check
      run: safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          target/dist/
          target/reports/
        retention-days: 90
        
    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      if: github.ref == 'refs/heads/master'
      with:
        name: production-artifacts
        path: target/dist/
        retention-days: 365

    - name: Configure AWS credentials
      if: github.ref == 'refs/heads/master'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Login to Amazon ECR
      if: github.ref == 'refs/heads/master'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Set up Docker Buildx
      if: github.ref == 'refs/heads/master'
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Docker image to ECR
      if: github.ref == 'refs/heads/master'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/product-management-app:latest
          ${{ steps.login-ecr.outputs.registry }}/product-management-app:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64