name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pybuilder
        pip install -r requirements.txt
        
    - name: Initialize PyBuilder
      run: |
        pyb --version
        pyb install_dependencies
        
    - name: Run unit tests
      run: |
        pyb run_unit_tests
        
    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-python-${{ matrix.python-version }}
        path: |
          target/reports/
          target/unittest-xml/
        retention-days: 30
        
    - name: Run code coverage
      run: |
        pyb coverage
        
    - name: Upload code coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-reports-python-${{ matrix.python-version }}
        path: |
          target/reports/coverage/
          htmlcov/
        retention-days: 30
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        file: ./target/reports/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Create build artifact
      run: |
        pyb publish
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      if: matrix.python-version == '3.10'
      with:
        name: build-artifacts
        path: |
          target/dist/
          target/reports/
        retention-days: 90
        
    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      if: matrix.python-version == '3.10' && github.ref == 'refs/heads/master'
      with:
        name: production-artifacts
        path: |
          target/dist/
        retention-days: 365

  security-scan:
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  deploy:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: production-artifacts
        path: ./artifacts
        
    - name: Display artifact structure
      run: |
        ls -la ./artifacts/
        
    # Add deployment steps here based on your deployment target
    # Examples:
    # - Deploy to AWS, Azure, GCP
    # - Deploy to Docker registry
    # - Deploy to PyPI
    # - Deploy to staging/production servers